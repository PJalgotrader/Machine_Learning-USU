2024-10-14 17:20:43,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-14 17:20:43,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-14 17:20:43,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-14 17:20:43,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-14 17:20:44,319:INFO:PyCaret ClassificationExperiment
2024-10-14 17:20:44,319:INFO:Logging name: clf-default-name
2024-10-14 17:20:44,328:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-14 17:20:44,328:INFO:version 3.3.2
2024-10-14 17:20:44,328:INFO:Initializing setup()
2024-10-14 17:20:44,328:INFO:self.USI: 0a3a
2024-10-14 17:20:44,328:INFO:self._variable_keys: {'_available_plots', 'y_train', 'X_train', 'idx', 'gpu_param', 'exp_name_log', 'log_plots_param', 'seed', 'fold_groups_param', 'y', 'n_jobs_param', 'y_test', 'fold_generator', 'X_test', 'data', 'fix_imbalance', 'USI', 'logging_param', 'pipeline', 'X', 'is_multiclass', 'target_param', 'gpu_n_jobs_param', 'fold_shuffle_param', '_ml_usecase', 'memory', 'html_param', 'exp_id'}
2024-10-14 17:20:44,328:INFO:Checking environment
2024-10-14 17:20:44,328:INFO:python_version: 3.11.9
2024-10-14 17:20:44,328:INFO:python_build: ('main', 'Apr 19 2024 16:40:41')
2024-10-14 17:20:44,328:INFO:machine: AMD64
2024-10-14 17:20:44,328:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-14 17:20:44,332:INFO:Memory: svmem(total=68479676416, available=51726970880, percent=24.5, used=16752705536, free=51726970880)
2024-10-14 17:20:44,332:INFO:Physical Core: 24
2024-10-14 17:20:44,332:INFO:Logical Core: 32
2024-10-14 17:20:44,332:INFO:Checking libraries
2024-10-14 17:20:44,332:INFO:System:
2024-10-14 17:20:44,332:INFO:    python: 3.11.9 | packaged by Anaconda, Inc. | (main, Apr 19 2024, 16:40:41) [MSC v.1916 64 bit (AMD64)]
2024-10-14 17:20:44,332:INFO:executable: c:\Users\pedram\anaconda3\envs\deep_forecasting\python.exe
2024-10-14 17:20:44,332:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-14 17:20:44,332:INFO:PyCaret required dependencies:
2024-10-14 17:20:44,914:INFO:                 pip: 24.0
2024-10-14 17:20:44,915:INFO:          setuptools: 69.5.1
2024-10-14 17:20:44,915:INFO:             pycaret: 3.3.2
2024-10-14 17:20:44,915:INFO:             IPython: 8.28.0
2024-10-14 17:20:44,915:INFO:          ipywidgets: 8.1.3
2024-10-14 17:20:44,915:INFO:                tqdm: 4.66.4
2024-10-14 17:20:44,915:INFO:               numpy: 1.26.4
2024-10-14 17:20:44,915:INFO:              pandas: 2.1.4
2024-10-14 17:20:44,915:INFO:              jinja2: 3.1.4
2024-10-14 17:20:44,915:INFO:               scipy: 1.11.4
2024-10-14 17:20:44,915:INFO:              joblib: 1.3.2
2024-10-14 17:20:44,915:INFO:             sklearn: 1.4.2
2024-10-14 17:20:44,915:INFO:                pyod: 2.0.0
2024-10-14 17:20:44,915:INFO:            imblearn: 0.12.3
2024-10-14 17:20:44,915:INFO:   category_encoders: 2.6.3
2024-10-14 17:20:44,915:INFO:            lightgbm: 4.3.0
2024-10-14 17:20:44,915:INFO:               numba: 0.59.1
2024-10-14 17:20:44,915:INFO:            requests: 2.32.3
2024-10-14 17:20:44,915:INFO:          matplotlib: 3.7.5
2024-10-14 17:20:44,915:INFO:          scikitplot: 0.3.7
2024-10-14 17:20:44,915:INFO:         yellowbrick: 1.5
2024-10-14 17:20:44,915:INFO:              plotly: 5.22.0
2024-10-14 17:20:44,915:INFO:    plotly-resampler: Not installed
2024-10-14 17:20:44,915:INFO:             kaleido: 0.2.1
2024-10-14 17:20:44,915:INFO:           schemdraw: 0.15
2024-10-14 17:20:44,915:INFO:         statsmodels: 0.14.2
2024-10-14 17:20:44,915:INFO:              sktime: 0.26.0
2024-10-14 17:20:44,915:INFO:               tbats: 1.1.3
2024-10-14 17:20:44,915:INFO:            pmdarima: 2.0.4
2024-10-14 17:20:44,915:INFO:              psutil: 6.0.0
2024-10-14 17:20:44,915:INFO:          markupsafe: 3.0.1
2024-10-14 17:20:44,915:INFO:             pickle5: Not installed
2024-10-14 17:20:44,915:INFO:         cloudpickle: 3.0.0
2024-10-14 17:20:44,915:INFO:         deprecation: 2.1.0
2024-10-14 17:20:44,915:INFO:              xxhash: 3.4.1
2024-10-14 17:20:44,915:INFO:           wurlitzer: Not installed
2024-10-14 17:20:44,915:INFO:PyCaret optional dependencies:
2024-10-14 17:20:46,495:INFO:                shap: 0.44.1
2024-10-14 17:20:46,495:INFO:           interpret: 0.6.1
2024-10-14 17:20:46,495:INFO:                umap: 0.5.6
2024-10-14 17:20:46,495:INFO:     ydata_profiling: 4.8.3
2024-10-14 17:20:46,495:INFO:  explainerdashboard: 0.4.7
2024-10-14 17:20:46,495:INFO:             autoviz: Not installed
2024-10-14 17:20:46,495:INFO:           fairlearn: 0.7.0
2024-10-14 17:20:46,495:INFO:          deepchecks: Not installed
2024-10-14 17:20:46,495:INFO:             xgboost: Not installed
2024-10-14 17:20:46,495:INFO:            catboost: 1.2.5
2024-10-14 17:20:46,495:INFO:              kmodes: 0.12.2
2024-10-14 17:20:46,495:INFO:             mlxtend: 0.23.1
2024-10-14 17:20:46,495:INFO:       statsforecast: 1.5.0
2024-10-14 17:20:46,495:INFO:        tune_sklearn: Not installed
2024-10-14 17:20:46,495:INFO:                 ray: Not installed
2024-10-14 17:20:46,495:INFO:            hyperopt: 0.2.7
2024-10-14 17:20:46,495:INFO:              optuna: 3.6.1
2024-10-14 17:20:46,495:INFO:               skopt: 0.10.2
2024-10-14 17:20:46,495:INFO:              mlflow: 2.13.1
2024-10-14 17:20:46,495:INFO:              gradio: 4.32.2
2024-10-14 17:20:46,495:INFO:             fastapi: 0.111.0
2024-10-14 17:20:46,495:INFO:             uvicorn: 0.30.1
2024-10-14 17:20:46,495:INFO:              m2cgen: 0.10.0
2024-10-14 17:20:46,495:INFO:           evidently: 0.4.25
2024-10-14 17:20:46,495:INFO:               fugue: 0.8.7
2024-10-14 17:20:46,495:INFO:           streamlit: 1.39.0
2024-10-14 17:20:46,495:INFO:             prophet: Not installed
2024-10-14 17:20:46,495:INFO:None
2024-10-14 17:20:46,495:INFO:Set up data.
2024-10-14 17:20:46,498:INFO:Set up folding strategy.
2024-10-14 17:20:46,498:INFO:Set up train/test split.
2024-10-14 17:20:46,503:INFO:Set up index.
2024-10-14 17:20:46,503:INFO:Assigning column types.
2024-10-14 17:20:46,504:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-14 17:20:46,524:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-14 17:20:46,526:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-14 17:20:46,541:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,541:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,574:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-14 17:20:46,575:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-14 17:20:46,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,587:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,588:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-14 17:20:46,608:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-14 17:20:46,621:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,621:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,642:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-14 17:20:46,655:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,655:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,655:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-14 17:20:46,688:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,688:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,720:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,720:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,721:INFO:Preparing preprocessing pipeline...
2024-10-14 17:20:46,722:INFO:Set up label encoding.
2024-10-14 17:20:46,722:INFO:Set up simple imputation.
2024-10-14 17:20:46,723:INFO:Set up encoding of ordinal features.
2024-10-14 17:20:46,724:INFO:Set up encoding of categorical features.
2024-10-14 17:20:46,752:INFO:Finished creating preprocessing pipeline.
2024-10-14 17:20:46,758:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\pedram\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['balance', 'income'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_em...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['student'],
                                    transformer=OrdinalEncoder(cols=['student'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'student',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-10-14 17:20:46,758:INFO:Creating final display dataframe.
2024-10-14 17:20:46,823:INFO:Setup _display_container:                     Description             Value
0                    Session id               555
1                        Target           default
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (10000, 4)
5        Transformed data shape        (10000, 4)
6   Transformed train set shape         (7000, 4)
7    Transformed test set shape         (3000, 4)
8              Numeric features                 2
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              0a3a
2024-10-14 17:20:46,858:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,859:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,892:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,892:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,893:INFO:setup() successfully completed in 2.57s...............
2024-10-14 17:20:46,898:INFO:gpu_param set to False
2024-10-14 17:20:46,931:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,931:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,964:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-14 17:20:46,964:INFO:Soft dependency imported: catboost: 1.2.5
2024-10-14 17:20:46,972:INFO:Initializing create_model()
2024-10-14 17:20:46,972:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-14 17:20:46,972:INFO:Checking exceptions
2024-10-14 17:20:46,979:INFO:Importing libraries
2024-10-14 17:20:46,979:INFO:Copying training dataset
2024-10-14 17:20:46,980:INFO:Defining folds
2024-10-14 17:20:46,981:INFO:Declaring metric variables
2024-10-14 17:20:46,982:INFO:Importing untrained model
2024-10-14 17:20:46,984:INFO:Logistic Regression Imported successfully
2024-10-14 17:20:46,986:INFO:Starting cross validation
2024-10-14 17:20:46,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-14 17:20:50,394:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,399:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,403:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,605:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,610:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,611:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,614:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,614:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,615:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,615:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,616:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,616:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,617:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,617:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,618:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,619:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,619:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,620:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,620:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,621:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,621:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,622:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,623:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,624:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,627:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,629:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,631:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,632:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,635:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,639:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:50,656:INFO:Calculating mean and std
2024-10-14 17:20:50,657:INFO:Creating metrics dataframe
2024-10-14 17:20:50,661:INFO:Finalizing model
2024-10-14 17:20:50,707:INFO:Uploading results into container
2024-10-14 17:20:50,707:INFO:Uploading model into container now
2024-10-14 17:20:50,712:INFO:_master_model_container: 1
2024-10-14 17:20:50,712:INFO:_display_container: 2
2024-10-14 17:20:50,712:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-14 17:20:50,712:INFO:create_model() successfully completed......................................
2024-10-14 17:20:50,783:INFO:Initializing tune_model()
2024-10-14 17:20:50,783:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-10-14 17:20:50,783:INFO:Checking exceptions
2024-10-14 17:20:50,791:INFO:Copying training dataset
2024-10-14 17:20:50,792:INFO:Checking base model
2024-10-14 17:20:50,792:INFO:Base model : Logistic Regression
2024-10-14 17:20:50,793:INFO:Declaring metric variables
2024-10-14 17:20:50,795:INFO:Defining Hyperparameters
2024-10-14 17:20:50,856:INFO:Tuning with n_jobs=-1
2024-10-14 17:20:50,856:INFO:Initializing RandomizedSearchCV
2024-10-14 17:20:56,276:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 7.669}
2024-10-14 17:20:56,277:INFO:Hyperparameter search completed
2024-10-14 17:20:56,277:INFO:SubProcess create_model() called ==================================
2024-10-14 17:20:56,277:INFO:Initializing create_model()
2024-10-14 17:20:56,278:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001554B4AA610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 7.669})
2024-10-14 17:20:56,278:INFO:Checking exceptions
2024-10-14 17:20:56,278:INFO:Importing libraries
2024-10-14 17:20:56,278:INFO:Copying training dataset
2024-10-14 17:20:56,282:INFO:Defining folds
2024-10-14 17:20:56,282:INFO:Declaring metric variables
2024-10-14 17:20:56,285:INFO:Importing untrained model
2024-10-14 17:20:56,285:INFO:Declaring custom model
2024-10-14 17:20:56,287:INFO:Logistic Regression Imported successfully
2024-10-14 17:20:56,292:INFO:Starting cross validation
2024-10-14 17:20:56,293:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-14 17:20:56,340:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,344:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,345:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,347:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,349:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,349:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,349:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,351:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,352:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,352:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,352:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,352:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,353:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,354:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,354:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,355:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,355:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,355:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,357:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,357:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,358:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,358:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,358:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,359:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,360:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,360:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,361:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,363:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,363:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,366:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,375:INFO:Calculating mean and std
2024-10-14 17:20:56,375:INFO:Creating metrics dataframe
2024-10-14 17:20:56,377:INFO:Finalizing model
2024-10-14 17:20:56,423:INFO:Uploading results into container
2024-10-14 17:20:56,423:INFO:Uploading model into container now
2024-10-14 17:20:56,424:INFO:_master_model_container: 2
2024-10-14 17:20:56,424:INFO:_display_container: 3
2024-10-14 17:20:56,424:INFO:LogisticRegression(C=7.669, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-14 17:20:56,424:INFO:create_model() successfully completed......................................
2024-10-14 17:20:56,484:INFO:SubProcess create_model() end ==================================
2024-10-14 17:20:56,484:INFO:choose_better activated
2024-10-14 17:20:56,486:INFO:SubProcess create_model() called ==================================
2024-10-14 17:20:56,486:INFO:Initializing create_model()
2024-10-14 17:20:56,486:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-14 17:20:56,486:INFO:Checking exceptions
2024-10-14 17:20:56,487:INFO:Importing libraries
2024-10-14 17:20:56,487:INFO:Copying training dataset
2024-10-14 17:20:56,489:INFO:Defining folds
2024-10-14 17:20:56,489:INFO:Declaring metric variables
2024-10-14 17:20:56,489:INFO:Importing untrained model
2024-10-14 17:20:56,489:INFO:Declaring custom model
2024-10-14 17:20:56,489:INFO:Logistic Regression Imported successfully
2024-10-14 17:20:56,489:INFO:Starting cross validation
2024-10-14 17:20:56,489:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-14 17:20:56,539:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,539:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,541:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,543:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,544:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,544:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,545:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,547:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,548:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,548:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,548:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,549:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,550:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,551:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,551:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,551:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,553:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,553:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,554:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,554:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,554:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,555:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,555:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,557:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,557:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,557:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,558:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,560:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,560:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,561:WARNING:c:\Users\pedram\anaconda3\envs\deep_forecasting\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-14 17:20:56,570:INFO:Calculating mean and std
2024-10-14 17:20:56,570:INFO:Creating metrics dataframe
2024-10-14 17:20:56,571:INFO:Finalizing model
2024-10-14 17:20:56,615:INFO:Uploading results into container
2024-10-14 17:20:56,616:INFO:Uploading model into container now
2024-10-14 17:20:56,616:INFO:_master_model_container: 3
2024-10-14 17:20:56,616:INFO:_display_container: 4
2024-10-14 17:20:56,616:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-14 17:20:56,616:INFO:create_model() successfully completed......................................
2024-10-14 17:20:56,677:INFO:SubProcess create_model() end ==================================
2024-10-14 17:20:56,677:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.9736
2024-10-14 17:20:56,677:INFO:LogisticRegression(C=7.669, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.9736
2024-10-14 17:20:56,678:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-10-14 17:20:56,678:INFO:choose_better completed
2024-10-14 17:20:56,678:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-10-14 17:20:56,682:INFO:_master_model_container: 3
2024-10-14 17:20:56,682:INFO:_display_container: 3
2024-10-14 17:20:56,683:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-14 17:20:56,683:INFO:tune_model() successfully completed......................................
2024-10-14 17:20:56,750:INFO:Initializing plot_model()
2024-10-14 17:20:56,750:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=parameter, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:20:56,750:INFO:Checking exceptions
2024-10-14 17:20:56,752:INFO:Preloading libraries
2024-10-14 17:20:56,752:INFO:Copying training dataset
2024-10-14 17:20:56,752:INFO:Plot type: parameter
2024-10-14 17:20:56,753:INFO:Visual Rendered Successfully
2024-10-14 17:20:56,813:INFO:plot_model() successfully completed......................................
2024-10-14 17:20:56,826:INFO:Initializing plot_model()
2024-10-14 17:20:56,826:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:20:56,826:INFO:Checking exceptions
2024-10-14 17:20:56,828:INFO:Preloading libraries
2024-10-14 17:20:56,828:INFO:Copying training dataset
2024-10-14 17:20:56,828:INFO:Plot type: auc
2024-10-14 17:20:56,896:INFO:Fitting Model
2024-10-14 17:20:56,897:INFO:Scoring test/hold-out set
2024-10-14 17:20:57,006:INFO:Visual Rendered Successfully
2024-10-14 17:20:57,068:INFO:plot_model() successfully completed......................................
2024-10-14 17:20:59,867:INFO:Initializing plot_model()
2024-10-14 17:20:59,868:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=threshold, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:20:59,868:INFO:Checking exceptions
2024-10-14 17:20:59,869:INFO:Preloading libraries
2024-10-14 17:20:59,870:INFO:Copying training dataset
2024-10-14 17:20:59,870:INFO:Plot type: threshold
2024-10-14 17:20:59,933:INFO:Fitting Model
2024-10-14 17:21:01,863:INFO:Scoring test/hold-out set
2024-10-14 17:21:02,018:INFO:Visual Rendered Successfully
2024-10-14 17:21:02,085:INFO:plot_model() successfully completed......................................
2024-10-14 17:21:02,844:INFO:Initializing plot_model()
2024-10-14 17:21:02,845:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=pr, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:21:02,845:INFO:Checking exceptions
2024-10-14 17:21:02,846:INFO:Preloading libraries
2024-10-14 17:21:02,846:INFO:Copying training dataset
2024-10-14 17:21:02,846:INFO:Plot type: pr
2024-10-14 17:21:02,910:INFO:Fitting Model
2024-10-14 17:21:02,911:INFO:Scoring test/hold-out set
2024-10-14 17:21:03,005:INFO:Visual Rendered Successfully
2024-10-14 17:21:03,075:INFO:plot_model() successfully completed......................................
2024-10-14 17:21:11,511:INFO:Initializing plot_model()
2024-10-14 17:21:11,511:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:21:11,511:INFO:Checking exceptions
2024-10-14 17:21:11,513:INFO:Preloading libraries
2024-10-14 17:21:11,513:INFO:Copying training dataset
2024-10-14 17:21:11,513:INFO:Plot type: confusion_matrix
2024-10-14 17:21:11,576:INFO:Fitting Model
2024-10-14 17:21:11,576:INFO:Scoring test/hold-out set
2024-10-14 17:21:11,634:INFO:Visual Rendered Successfully
2024-10-14 17:21:11,697:INFO:plot_model() successfully completed......................................
2024-10-14 17:21:11,905:INFO:Initializing plot_model()
2024-10-14 17:21:11,905:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=class_report, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:21:11,906:INFO:Checking exceptions
2024-10-14 17:21:11,907:INFO:Preloading libraries
2024-10-14 17:21:11,907:INFO:Copying training dataset
2024-10-14 17:21:11,908:INFO:Plot type: class_report
2024-10-14 17:21:11,972:INFO:Fitting Model
2024-10-14 17:21:11,972:INFO:Scoring test/hold-out set
2024-10-14 17:21:12,076:INFO:Visual Rendered Successfully
2024-10-14 17:21:12,144:INFO:plot_model() successfully completed......................................
2024-10-14 17:21:12,298:INFO:Initializing plot_model()
2024-10-14 17:21:12,298:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=boundary, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:21:12,298:INFO:Checking exceptions
2024-10-14 17:21:12,299:INFO:Preloading libraries
2024-10-14 17:21:12,299:INFO:Copying training dataset
2024-10-14 17:21:12,299:INFO:Plot type: boundary
2024-10-14 17:21:12,332:INFO:Fitting StandardScaler()
2024-10-14 17:21:12,334:INFO:Fitting PCA()
2024-10-14 17:21:12,366:INFO:Fitting Model
2024-10-14 17:21:12,858:INFO:Visual Rendered Successfully
2024-10-14 17:21:12,939:INFO:plot_model() successfully completed......................................
2024-10-14 17:21:13,176:INFO:Initializing plot_model()
2024-10-14 17:21:13,176:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015546ACD950>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=555, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), plot=learning, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-10-14 17:21:13,176:INFO:Checking exceptions
2024-10-14 17:21:13,177:INFO:Preloading libraries
2024-10-14 17:21:13,178:INFO:Copying training dataset
2024-10-14 17:21:13,178:INFO:Plot type: learning
2024-10-14 17:21:13,247:INFO:Fitting Model
2024-10-14 17:21:15,908:INFO:Visual Rendered Successfully
2024-10-14 17:21:15,970:INFO:plot_model() successfully completed......................................
